<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秒西</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.myzwl.win/"/>
  <updated>2017-11-07T10:09:32.000Z</updated>
  <id>http://www.myzwl.win/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>丑数</title>
    <link href="http://www.myzwl.win/2017/10/22/offer_44/"/>
    <id>http://www.myzwl.win/2017/10/22/offer_44/</id>
    <published>2017-10-22T06:48:51.000Z</published>
    <updated>2017-11-07T10:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>由丑数的定义知道丑数只有以上三个因子，所以在排序的丑数列表中，后面的某个丑数一定是前面某个丑数乘以2或3或5的结果，所以我们以这三个因子的到的丑数进行排序，把最小的丑数更新到丑数列表中，如果刚好是丑数中的最小值，则把该数对应的下标加1，然后继续寻找下一个丑数</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public int GetUglyNumber_Solution(int index) &#123;</div><div class="line">       if(index&lt;=0)return 0;</div><div class="line">       int[] ugly=new int[index];</div><div class="line">       ugly[0]=1;</div><div class="line">       int count=1;</div><div class="line">       int num2=0;</div><div class="line">       int num3=0;</div><div class="line">       int num5=0;</div><div class="line">       while(count&lt;index)&#123;</div><div class="line">           int min=IsUglyNumber(ugly[num2]*2,ugly[num3]*3,ugly[num5]*5);</div><div class="line">           ugly[count]=min;</div><div class="line">           count++;</div><div class="line">           if(min==ugly[num2]*2)</div><div class="line">               num2++;</div><div class="line">           if(min==ugly[num3]*3)</div><div class="line">               num3++;</div><div class="line">           if(min==ugly[num5]*5)</div><div class="line">               num5++;</div><div class="line">       &#125;    </div><div class="line">       return ugly[index-1];</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private int IsUglyNumber(int num2,int num3,int num5)&#123;</div><div class="line">       int min=num2&lt;num3?num2:num3;</div><div class="line">       return min&lt;num5?min:num5;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>左旋转字符串</title>
    <link href="http://www.myzwl.win/2017/10/21/offer_43/"/>
    <id>http://www.myzwl.win/2017/10/21/offer_43/</id>
    <published>2017-10-21T06:48:51.000Z</published>
    <updated>2017-11-07T10:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>我的想法是构造两个字符数组，一个用来保存要移位的字符集，另一个是不移位的字符，最后将其按照顺序保存在一个新的字符数组中即可</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public String LeftRotateString(String str,int n) &#123;</div><div class="line">      if(str==null||str.equals("")||n&gt;str.length())</div><div class="line">          return "";</div><div class="line">      if(n==0)</div><div class="line">          return str;</div><div class="line">          char[] s1=new char[n];</div><div class="line">      char[] s2=new char[str.length()-n];</div><div class="line">      char[] s3=str.toCharArray();</div><div class="line">      for(int i=0;i&lt;str.length();i++)&#123;</div><div class="line">          if(i&gt;=0&amp;&amp;i&lt;n)</div><div class="line">              s1[i]=s3[i];</div><div class="line">          else</div><div class="line">              s2[i-n]=s3[i];</div><div class="line">      &#125;</div><div class="line">      StringBuffer sb=new StringBuffer(str.length());</div><div class="line">      for(int i=0;i&lt;s2.length;i++)</div><div class="line">          sb.append(s2[i]);</div><div class="line">      for(int i=0;i&lt;s1.length;i++)</div><div class="line">          sb.append(s1[i]);</div><div class="line">      return sb.toString();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>翻转单词顺序列</title>
    <link href="http://www.myzwl.win/2017/10/20/offer_42/"/>
    <id>http://www.myzwl.win/2017/10/20/offer_42/</id>
    <published>2017-10-20T06:48:51.000Z</published>
    <updated>2017-11-07T09:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>关于这个题目，有很多种解法，其中一个解法是利用倒序，即从数组的最后一个数开始依次加入到stringBuffer中即可</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public String ReverseSentence(String str) &#123;</div><div class="line">       if(str == null)&#123; return null;&#125;</div><div class="line">        if(str.trim().equals(""))&#123;</div><div class="line">           return str;</div><div class="line">       &#125;</div><div class="line">           String[] s=str.split(" ");</div><div class="line">       StringBuffer sb=new StringBuffer(s.length);</div><div class="line">       for(int i=s.length-1;i&gt;=0;i--)&#123;</div><div class="line">           if(i!=0)</div><div class="line">           sb.append(s[i]+" ");</div><div class="line">           else</div><div class="line">               sb.append(s[i]);</div><div class="line">       &#125;</div><div class="line">       return sb.toString();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌顺子</title>
    <link href="http://www.myzwl.win/2017/10/19/offer_41/"/>
    <id>http://www.myzwl.win/2017/10/19/offer_41/</id>
    <published>2017-10-19T06:48:51.000Z</published>
    <updated>2017-11-07T09:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>先将大小王约定为0，可以补充任何相差的数字，然后进行排序并且统计出其中0的个数，然后对后面的数进行判断，如果相邻数字小于0的个数，是可以填补的，然后在减少0的个数，依次比较，直到最后连续</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public boolean isContinuous(int [] numbers) &#123;</div><div class="line">         if(numbers==null)</div><div class="line">             return false;</div><div class="line">       Arrays.sort(numbers);</div><div class="line">       int i=0,zero=0;</div><div class="line">       for(;i&lt;numbers.length&amp;&amp;numbers[i]==0;i++)</div><div class="line">           zero++;</div><div class="line">       for(;i&lt;numbers.length-1&amp;&amp;zero&gt;=0;i++)&#123;</div><div class="line">           if(numbers[i]==numbers[i+1])</div><div class="line">               return false;</div><div class="line">           if(numbers[i]+1+zero&gt;=numbers[i+1])&#123;</div><div class="line">               zero-=numbers[i+1]-numbers[i]-1;</div><div class="line">           &#125;</div><div class="line">           else</div><div class="line">               return false;</div><div class="line">       &#125;</div><div class="line">       if(i==numbers.length -1)</div><div class="line">           return true;</div><div class="line">       else</div><div class="line">           return false;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>求1+2+3+...+n</title>
    <link href="http://www.myzwl.win/2017/10/18/offer_40/"/>
    <id>http://www.myzwl.win/2017/10/18/offer_40/</id>
    <published>2017-10-18T06:48:51.000Z</published>
    <updated>2017-11-07T09:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>根据题目的约束，只能使用递归操作了。当n递归到最小值1时结束，并且每次递归调用一次，值就减少1，直至n为1为止</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private int result=0;</div><div class="line">    public int Sum_Solution(int n) &#123;</div><div class="line">        cale(n);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private boolean cale(int n)&#123;</div><div class="line">        result+=n;</div><div class="line">        return n!=0&amp;&amp;cale(n-1);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>不用加减乘除做加法</title>
    <link href="http://www.myzwl.win/2017/10/17/offer_39/"/>
    <id>http://www.myzwl.win/2017/10/17/offer_39/</id>
    <published>2017-10-17T06:48:51.000Z</published>
    <updated>2017-11-07T08:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思想是采用位运算，主要分为三步，比如5（101）+17（10001），第一步各位相加但不进位，得10100，第二部记下进位，的10，最后一步把前两部相加，得22（10110），根据异或和与逻辑与的运算规则，很容易知道第一步符合异或规则，第二部先与在左移一位进位即可</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public int Add(int num1,int num2) &#123;</div><div class="line">       int sum,carry;</div><div class="line">       do&#123;</div><div class="line">           sum=num1^num2;</div><div class="line">           carry=(num1&amp;num2)&lt;&lt;1;</div><div class="line">           num1=sum;</div><div class="line">           num2=carry;</div><div class="line">       &#125;while(num2!=0);</div><div class="line">       return num1;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。&lt;/p&gt;
&lt;h4 id=&quot;思路分析&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数组中重复的数字</title>
    <link href="http://www.myzwl.win/2017/10/16/offer_38/"/>
    <id>http://www.myzwl.win/2017/10/16/offer_38/</id>
    <published>2017-10-16T06:48:51.000Z</published>
    <updated>2017-11-07T08:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思想可以相对整个数组进行排序，这样如果相邻元素一样说明是重复的，只要遍历整个数组，找到第一个相同的就找到了第一个重复的数字</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public boolean duplicate(int numbers[],int length,int [] duplication) &#123;</div><div class="line">        if(length==0||numbers==null)</div><div class="line">        &#123;</div><div class="line">            duplication[0]=-1;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">           Arrays.sort(numbers);</div><div class="line">           for(int i=0;i&lt;numbers.length-1;i++)&#123;</div><div class="line">               if(numbers[i]==numbers[i+1])</div><div class="line">               &#123;</div><div class="line">                   duplication[0]=numbers[i];</div><div class="line">                   return true;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式匹配</title>
    <link href="http://www.myzwl.win/2017/10/15/offer_37/"/>
    <id>http://www.myzwl.win/2017/10/15/offer_37/</id>
    <published>2017-10-15T06:48:51.000Z</published>
    <updated>2017-11-07T04:21:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>先考虑模式串中有’<em>‘的情况，因为</em>可以匹配0个或多个，所以如果模式串的下一个字符是<em>的时候就有三种情况<br>1.匹配0个主串的字符，比如主串是abc，模式串是b</em>，那么下一步匹配的策略是主串保持不变，模式串跳到下两个字符重新比较，<br>2.匹配1个字符，比如主串是abc，模式串是a<em>，下一步比较策略是主串跳到下一个字符，模式串移动两个字符<br>3.匹配多个字符，比如主串aac，模式串是a</em>cb，因为只匹配aa两个字符，下一步策略是主串移动一个字符，模式串移动两个字符，如果当前字符与主串字符不能匹配，则主串不变，模式串移动两个位置<br>如果当前字符是’.’，直接按逐个字符进行比较</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public boolean match(char[] str,char[] pattern)&#123;</div><div class="line">    if(str==null||pattern==null)</div><div class="line">      return false;</div><div class="line">    return matchRegCore(str,0,str.length,pattern,0,pattern.length);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  private boolean matchRegCore(char[] str,int i,int length1,char[] pattern,int j,int length2)&#123;</div><div class="line">    if(i==length1&amp;&amp;j==length2)&#123;</div><div class="line">      if(j==length2||pattern[j]=='*')</div><div class="line">        return true;</div><div class="line">      else</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    if(i!=length1&amp;&amp;j==length2)</div><div class="line">      return false;</div><div class="line">    if(j+1&lt;length2&amp;&amp;pattern[j+1]=='*')&#123;</div><div class="line">      if(i&lt;length1&amp;&amp;(pattern[j]==str[i]||pattern[j]=='.'))&#123;</div><div class="line">        return matchRegCore(str,i+1,length1,pattern,j,length2)||</div><div class="line">            matchRegCore(str,i+1,length1,pattern,j+2,length2)||</div><div class="line">            matchRegCore(str,i,length1,pattern,j+2,length2);</div><div class="line">      &#125;else&#123;</div><div class="line">        return matchRegCore(str,i,length1,pattern,j+2,length2);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    if(i&lt;length1&amp;&amp;(str[i]==pattern[j]||pattern[j]=='.'))&#123;</div><div class="line">      return matchRegCore(str,i+1,length1,pattern,j+1,length2);</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;请实现一个函数用来匹配包括’.’和’&lt;em&gt;‘的正则表达式。模式中的字符’.’表示任意一个字符，而’&lt;/em&gt;‘表示它前面的
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>表示数值的字符串</title>
    <link href="http://www.myzwl.win/2017/10/14/offer_36/"/>
    <id>http://www.myzwl.win/2017/10/14/offer_36/</id>
    <published>2017-10-14T06:48:51.000Z</published>
    <updated>2017-11-07T04:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思路就是分情况讨论，主要分为三类：整数、浮点数和科学计数法。<br>对于整数的判断，就是字符串中没有出现非0到9的字符即可，否则返回错误<br>对于浮点数，只要考虑整数后面出现一个小数点，而后面的判断与整数相同，<br>对于科学计数法，就是e和E后其后面的字符串与整数一样，同时如果后面没有数字是不被允许的</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public boolean isNumeric(char[] str) &#123;</div><div class="line">        if(str==null||str.length==0)return false;</div><div class="line">        int index=0;</div><div class="line">        int length=str.length;</div><div class="line">        while(index&lt;length&amp;&amp;str[index]==' ')index++;</div><div class="line">        if(index&gt;=length)return false;</div><div class="line">        while(str[length-1]==' ')length--;</div><div class="line">        if(str[index]=='+'||str[index]=='-')index++;</div><div class="line">        if(index&gt;=length)return false;</div><div class="line">        </div><div class="line">        while(index&lt;length&amp;&amp;str[index]&gt;='0'&amp;&amp;str[index]&lt;='9')index++;</div><div class="line">        if(index==length) return true;</div><div class="line">        int index2=index;</div><div class="line">        </div><div class="line">        if(str[index]=='.')&#123;</div><div class="line">          index++;</div><div class="line">          if(index==length)return true;</div><div class="line">          index2=index;</div><div class="line">          while(index&lt;length&amp;&amp;str[index]&gt;='0'&amp;&amp;str[index]&lt;='9')index++;</div><div class="line">          if(index==index2) return false;</div><div class="line">          if(index==length) return true;</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">        if(str[index]=='e'||str[index]=='E')&#123;</div><div class="line">          index++;</div><div class="line">          if(index==length)return false;</div><div class="line">          if(str[index]=='+'||str[index]=='-')index++;</div><div class="line">          index2=index;</div><div class="line">          while(index&lt;length&amp;&amp;str[index]&gt;='0'&amp;&amp;str[index]&lt;='9')index++;</div><div class="line">          if(index==index2) return false;</div><div class="line">          if(index==length) return true;</div><div class="line">        &#125;</div><div class="line">          return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.141
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>字符流中第一个不重复的字符</title>
    <link href="http://www.myzwl.win/2017/10/13/offer_35/"/>
    <id>http://www.myzwl.win/2017/10/13/offer_35/</id>
    <published>2017-10-13T06:48:51.000Z</published>
    <updated>2017-11-07T03:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。<br>如果当前字符流没有存在出现一次的字符，返回#字符。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思想就是创建一个map用来记录每个字符出现的次数，而list则记录只出现一次的字符集合，遍历字符，如果map中不存在说明是第一次，则把字符作为key加入，然后在放到list中，如果map中包含了该键，一方面记录该字符次数，另一方面看list中是否包含该元素，在删除，最后list中只保留出现一次的字符</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">private Map&lt;Character, Integer&gt; map=new HashMap&lt;Character, Integer&gt;();</div><div class="line">  private List&lt;Character&gt; list=new ArrayList&lt;Character&gt;();</div><div class="line">  </div><div class="line">  //Insert one char from stringstream</div><div class="line">  public void Insert(char ch)</div><div class="line">  &#123;</div><div class="line">      if(!map.containsKey(ch))&#123;</div><div class="line">          map.put(ch, 1);</div><div class="line">          list.add(ch);</div><div class="line">      &#125;else&#123;</div><div class="line">          map.put(ch, map.get(ch)+1);</div><div class="line">          if(list.contains(ch))</div><div class="line">              list.remove(Character.valueOf(ch));</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">  &#125;</div><div class="line">//return the first appearence once char in current stringstream</div><div class="line">  public char FirstAppearingOnce()</div><div class="line">  &#123;</div><div class="line">  if(list.isEmpty())return '#';</div><div class="line">  return list.get(0);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数组中只出现一次的数字</title>
    <link href="http://www.myzwl.win/2017/10/12/offer_34/"/>
    <id>http://www.myzwl.win/2017/10/12/offer_34/</id>
    <published>2017-10-12T06:48:51.000Z</published>
    <updated>2017-11-07T03:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思想就是如果数组中元素是第一次出现，则加入集合中，继续往后遍历，如果包含该元素，则删除那个元素，最后通过筛选只剩下出现一次的元素了</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//num1,num2分别为长度为1的数组。传出参数</div><div class="line">//将num1[0],num2[0]设置为返回结果</div><div class="line">import java.util.List;</div><div class="line">import java.util.ArrayList;</div><div class="line">public class Solution &#123;</div><div class="line">   public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) &#123;</div><div class="line">          ArrayList&lt;Integer&gt; list=new ArrayList&lt;Integer&gt;();</div><div class="line">        for(int i=0;i&lt;array.length;i++)&#123;</div><div class="line">            if(list.contains(array[i]))&#123;</div><div class="line">                list.remove((Integer)array[i]);</div><div class="line">            &#125;else&#123;</div><div class="line">                list.add(array[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        num1[0]=list.get(0);</div><div class="line">        num2[0]=list.get(1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。&lt;/p&gt;
&lt;h4 id=&quot;思路分
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>和为S的两个数字</title>
    <link href="http://www.myzwl.win/2017/10/11/offer_33/"/>
    <id>http://www.myzwl.win/2017/10/11/offer_33/</id>
    <published>2017-10-11T06:48:51.000Z</published>
    <updated>2017-11-05T04:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思想就是设置两个变量，起始变量start和指向尾的变量end，刚开始先比较和cur=start+end与s的和，如果比s大说明最后的end数较大，end应前移，直至小于等于，反之则是start较小，start应后移。直至最后等于为止，此时因为end处于最大的情况，所以start处于最小，也是所要找的两个数。但是如果不存在，则返回空</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public ArrayList&lt;Integer&gt; FindNumbersWithSum(int [] array,int sum) &#123;</div><div class="line">        ArrayList&lt;Integer&gt; list=new ArrayList&lt;Integer&gt;();</div><div class="line">         ArrayList&lt;Integer&gt; lists=new ArrayList&lt;Integer&gt;();</div><div class="line">        if(array==null||sum&lt;=0) return list;</div><div class="line">        int start=0;</div><div class="line">        int end=array.length-1;</div><div class="line">        int curSum=array[start]+array[end];</div><div class="line">        while(start&lt;end)&#123;</div><div class="line">            if(curSum==sum)&#123;</div><div class="line">                    list.add(array[start]);</div><div class="line">                    list.add(array[end]);</div><div class="line">                &#125;</div><div class="line">            while(curSum&gt;sum)&#123;</div><div class="line">                end--;</div><div class="line">                 curSum=array[start]+array[end];</div><div class="line">                if(curSum==sum)&#123;</div><div class="line">                    list.add(array[start]);</div><div class="line">                    list.add(array[end]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            start++;  </div><div class="line">            curSum=array[start]+array[end];</div><div class="line">        &#125;</div><div class="line">        if(list.size()==0)return list;</div><div class="line">        lists.add(list.get(0));</div><div class="line">        lists.add(list.get(1));</div><div class="line">        return lists;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>和为S的连续正数序列</title>
    <link href="http://www.myzwl.win/2017/10/10/offer_32/"/>
    <id>http://www.myzwl.win/2017/10/10/offer_32/</id>
    <published>2017-10-10T06:48:51.000Z</published>
    <updated>2017-11-05T02:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>核心思想就是通过两个变量small（最小值）和big（最大值）来控制，比如s为12，起始samll为1，big为2，和为3小于12，说明big需要后移一位，此时为{1,2,3}为6，小于12，big在增大直至{1,2,3,4,5}为15大于12，说明最小值应该后移，所以为{2,3,4,5}，继续后移{3,4,5}满足，找到了，思路大致就是这样，但是small移动时不能超过（sum+1）/2，也就是平均值，因为超过平均值后面肯定会大于s了</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(int sum) &#123;</div><div class="line">      ArrayList&lt;ArrayList&lt;Integer&gt;&gt; sqList=new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">       if(sum&lt;3)return sqList;</div><div class="line">       int small=1;</div><div class="line">       int big=2;</div><div class="line">       int curSum=small+big;</div><div class="line">       int middle=(1+sum)/2;</div><div class="line">       while(small&lt;middle)&#123;</div><div class="line">           ArrayList&lt;Integer&gt; sq=new ArrayList&lt;Integer&gt;();</div><div class="line">          if(curSum==sum)&#123;</div><div class="line">               for(int i=small;i&lt;=big;i++)</div><div class="line">                   sq.add(i);</div><div class="line">           &#125;</div><div class="line">           while(curSum&gt;sum&amp;&amp;small&lt;middle)&#123;</div><div class="line">               curSum-=small;</div><div class="line">               small++;</div><div class="line">               if(curSum==sum)&#123;</div><div class="line">               for(int i=small;i&lt;=big;i++)</div><div class="line">                   sq.add(i);</div><div class="line">           &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       if(sq.size()&gt;0)sqList.add(sq);</div><div class="line">       big++;</div><div class="line">       curSum+=big;</div><div class="line">       &#125;</div><div class="line">       return sqList;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数字在排序数组中出现的次数</title>
    <link href="http://www.myzwl.win/2017/10/09/offer_31/"/>
    <id>http://www.myzwl.win/2017/10/09/offer_31/</id>
    <published>2017-10-09T06:48:51.000Z</published>
    <updated>2017-11-04T11:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>统计一个数字在排序数组中出现的次数。</p>
<h4 id="思路分析-解法一"><a href="#思路分析-解法一" class="headerlink" title="思路分析(解法一)"></a>思路分析(解法一)</h4><p>最直观的想法就是通过顺序查找，即依次比较数组与给定元素大小，然后设置一个计数变量，又由于数组是排序的，所以直接当比较的数大于给定数时，结束</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public int GetNumberOfK(int [] array , int k) &#123;</div><div class="line">         if(array==null)return 0;</div><div class="line">         int count=0;</div><div class="line">         for(int i=0;i&lt;array.length;i++)&#123;</div><div class="line">           if(array[i]==k)&#123;</div><div class="line">             count++;</div><div class="line">           &#125;</div><div class="line">           if(array[i]&gt;k)</div><div class="line">             return count;</div><div class="line">         &#125;</div><div class="line">         return count;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="思路分析-解法二"><a href="#思路分析-解法二" class="headerlink" title="思路分析(解法二)"></a>思路分析(解法二)</h4><p>由于是已排序的，所以查找最好的就是通过二分查找，即先找出第一次出现和最后一次出现该数即可，但是由于当我们找到该数时，比如第一次找到该数时，先比较在他前面是否有重复该数，如果是，这说明据需向前面比较，知道找到第一次出现该数，同理，最后一次出现该数也是比较后面是否有该数重复</p>
<h4 id="码上有戏-1"><a href="#码上有戏-1" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public int GetNumberOfK(int [] array , int k) &#123;</div><div class="line">    int length = array.length;</div><div class="line">         if(length == 0)&#123;</div><div class="line">             return 0;</div><div class="line">         &#125;</div><div class="line">         int firstK = getFirstK(array, k, 0, length-1);</div><div class="line">         int lastK = getLastK(array, k, 0, length-1);</div><div class="line">         if(firstK != -1 &amp;&amp; lastK != -1)&#123;</div><div class="line">              return lastK - firstK + 1;</div><div class="line">         &#125;</div><div class="line">         return 0;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> private int getFirstK(int array[],int k,int start,int end)&#123;</div><div class="line">   if(start&gt;end)return -1;</div><div class="line">    int mid=(start+end)&gt;&gt;1;</div><div class="line">   if(array[mid]&gt;k)return getFirstK(array,k,start,mid-1);</div><div class="line">   else if(array[mid]&lt;k) return getFirstK(array,k,mid+1,end);</div><div class="line">       else if(mid-1 &gt;=0 &amp;&amp; array[mid-1] == k)&#123;</div><div class="line">           return getFirstK(array, k, start, mid-1);</div><div class="line">       &#125;</div><div class="line">   else return mid;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> private int getLastK(int array[],int k,int start,int end)&#123;</div><div class="line">       int length = array.length;</div><div class="line">   int mid=(start+end)&gt;&gt;1;</div><div class="line">   while(start&lt;=end)&#123;</div><div class="line">     if(array[mid]&lt;k)</div><div class="line">       start=mid+1;</div><div class="line">     else if(array[mid]&gt;k)</div><div class="line">       end=mid-1;</div><div class="line">           else if(mid+1 &lt; length &amp;&amp; array[mid+1] == k)&#123;</div><div class="line">               start = mid+1;</div><div class="line">           &#125;</div><div class="line">     else </div><div class="line">       return mid;</div><div class="line">     mid=(start+end)&gt;&gt;1;</div><div class="line">   &#125;</div><div class="line">   return -1;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;统计一个数字在排序数组中出现的次数。&lt;/p&gt;
&lt;h4 id=&quot;思路分析-解法一&quot;&gt;&lt;a href=&quot;#思路分析-解法一&quot; c
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口的最大值</title>
    <link href="http://www.myzwl.win/2017/10/08/offer_30/"/>
    <id>http://www.myzwl.win/2017/10/08/offer_30/</id>
    <published>2017-10-08T06:48:51.000Z</published>
    <updated>2017-11-04T10:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>我的想法是先设置一个变量k用来记录每个滑动窗口的起始位置，如第一个滑动窗口k=0；然后取出数组中相应滑动窗口大小的数组的最大值，目前用选择排序思想取出每个滑动窗口最大值，如第一个[2,3,4]最大值为4，然后通过循环条件k与size，当k+size大于数组长度，也就是遍历完所有滑动窗口，每次都将每个窗口最大值保存起来即可</p>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">public class Solution &#123;</div><div class="line">   public ArrayList&lt;Integer&gt; maxInWindows(int [] num, int size)</div><div class="line">    &#123;</div><div class="line">        ArrayList&lt;Integer&gt; array=new ArrayList&lt;Integer&gt;();</div><div class="line">        if(num==null||size&lt;=0)return array;</div><div class="line">        int len=num.length;</div><div class="line">        int k=0;</div><div class="line">       while(k+size&lt;=len)&#123;</div><div class="line">          array.add(maxInWindow(num,k,size));</div><div class="line">          k++;</div><div class="line">       &#125;</div><div class="line">   return array;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private int maxInWindow(int[] num,int k,int size)&#123;</div><div class="line">        int i=k;</div><div class="line">        int top=num[k];</div><div class="line">        for(;i&lt;k+size;i++)&#123;</div><div class="line">            if(num[i]&gt;top)</div><div class="line">                top=num[i];</div><div class="line">        &#125;</div><div class="line">            return top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口
    
    </summary>
    
      <category term="剑指offer" scheme="http://www.myzwl.win/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://www.myzwl.win/source/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>魔法币_网易2018校招编程题</title>
    <link href="http://www.myzwl.win/2017/09/17/face_9/"/>
    <id>http://www.myzwl.win/2017/09/17/face_9/</id>
    <published>2017-09-17T09:48:51.000Z</published>
    <updated>2017-09-19T15:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小易准备去魔法王国采购魔法神器,购买魔法神器需要使用魔法币,但是小易现在一枚魔法币都没有,但是小易有两台魔法机器可以通过投入x(x可以为0)个魔法币产生更多的魔法币。<br>魔法机器1:如果投入x个魔法币,魔法机器会将其变为2x+1个魔法币<br>魔法机器2:如果投入x个魔法币,魔法机器会将其变为2x+2个魔法币<br>小易采购魔法神器总共需要n个魔法币,所以小易只能通过两台魔法机器产生恰好n个魔法币,小易需要你帮他设计一个投入方案使他最后恰好拥有n个魔法币。<br>输入描述:<br>输入包括一行,包括一个正整数n(1 ≤ n ≤ 10^9),表示小易需要的魔法币数量。<br>输出描述:<br>输出一个字符串,每个字符表示该次小易选取投入的魔法机器。其中只包含字符’1’和’2’。<br>输入例子1:<br>10<br>输出例子1:<br>122</p>
<h4 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h4><p>除了内存超出规定外，其余都符合算法要求<br><img src="/images/imgs4/34.jpg" alt="Alt text"><br>思路如下:</p>
<blockquote>
<p>1.先构造并初始化一个完全二叉树，如图所示<br>2.然后从左子树开始遍历二叉树，同时将遍历的结点放到一个集合中，并且将该集合也就是到该节点的路径放到另一个集合中，如果没有找到该节点，则向上（父节点）开始遍历，同时删掉向下遍历的结点和路径，然后右递归<br>3.找到指定结点后，对应也找到对应的结点路径，剩下就是观察发现，如果路径中结点的值为偶数（右子树）对应2，左子树对应1，放在一个可变字符串中<br>4.本地测试（不考虑内存消耗过大），ok</p>
</blockquote>
<h4 id="码上有戏"><a href="#码上有戏" class="headerlink" title="码上有戏"></a>码上有戏</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">public class Main&#123;</div><div class="line">    </div><div class="line">	  public static class TreeNode&#123;</div><div class="line">	        int val;</div><div class="line">	        TreeNode left;</div><div class="line">	        TreeNode right;</div><div class="line">	        </div><div class="line">	        public TreeNode(int val)&#123;</div><div class="line">	            this.val=val;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	     </div><div class="line">    public static void main(String[] args) throws Exception&#123;</div><div class="line">        Main m=new Main();</div><div class="line">        BufferedReader br = new BufferedReader(new InputStreamReader(System.in ));</div><div class="line">       int n=Integer.parseInt(br.readLine());</div><div class="line">        String s=m.getpa(n,new ArrayList&lt;Integer&gt;(),new ArrayList&lt;List&lt;Integer&gt;&gt;());</div><div class="line">        System.out.println(s);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">     public String  getpa(int n,List&lt;Integer&gt;  nodes,List&lt;List&lt;Integer&gt;&gt; paths)&#123;</div><div class="line">          TreeNode root=new TreeNode(0);</div><div class="line">         if(n&lt;=0)return null;</div><div class="line">         paths=getPath(root,n,nodes,paths);      </div><div class="line">          List&lt;Integer&gt; target=paths.get(0);</div><div class="line">          StringBuilder s=new StringBuilder(); </div><div class="line">          target.remove(0);</div><div class="line">         for(Integer val:target)&#123;</div><div class="line">        	 if((val&amp;0x1)==0)    &#123;       	 </div><div class="line">                 s.append("2");             </div><div class="line">             &#125;</div><div class="line">              else&#123;            	</div><div class="line">                  s.append("1");</div><div class="line">              &#125;</div><div class="line">            </div><div class="line">         &#125;</div><div class="line">          return s.toString();</div><div class="line">      &#125;</div><div class="line">    </div><div class="line">    List&lt;List&lt;Integer&gt;&gt; getPath(TreeNode root,int n,List&lt;Integer&gt; nodes,List&lt;List&lt;Integer&gt;&gt; paths)&#123;</div><div class="line">          if(root==null)</div><div class="line">            return paths;</div><div class="line">              init(root,n);</div><div class="line">            nodes.add(root.val);</div><div class="line">         if(root.val==n)&#123;</div><div class="line">             List&lt;Integer&gt; temp=new ArrayList&lt;Integer&gt;();</div><div class="line">              for(Integer t:nodes)&#123;</div><div class="line">                  temp.add(t);</div><div class="line">              &#125;</div><div class="line">               paths.add(temp);           </div><div class="line">         &#125;</div><div class="line">        if(root.left!=null)</div><div class="line">            getPath(root.left,n,nodes,paths);</div><div class="line">        if(root.right!=null)</div><div class="line">            getPath(root.right,n,nodes,paths);        </div><div class="line">        Integer tt=nodes.remove(nodes.size()-1);</div><div class="line">         return paths;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    void init(TreeNode root,int n)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        if(root.val&lt;n)</div><div class="line">            &#123;</div><div class="line">            if(2*root.val+1&lt;=n)</div><div class="line">                root.left=new TreeNode(2*root.val+1);</div><div class="line">            if(2*root.val+2&lt;=n)</div><div class="line">                root.right=new TreeNode(2*root.val+2);</div><div class="line">        &#125;</div><div class="line">        init(root.left,n);</div><div class="line">        init(root.right,n);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="奇偶倒退法"><a href="#奇偶倒退法" class="headerlink" title="奇偶倒退法"></a>奇偶倒退法</h4><p>核心思路就是从最后一个数，通过判断最后一个数是否是奇偶，来倒推，直至为0为止</p>
<blockquote>
<p>public class Main{<br>   public static void main(String[] args) {<br>        Scanner in = new Scanner(System.in);<br>        while (in.hasNext()) {<br>            int Count = in.nextInt();<br>            StringBuilder sb = new StringBuilder();<br>            while (Count &gt; 0) {<br>                if (Count % 2 == 0) {<br>                    Count = (Count - 2) / 2;<br>                    sb.append(“2”);<br>                } else {<br>                    Count = (Count - 1) / 2;<br>                    sb.append(“1”);<br>                }<br>            }<br>            System.out.println(sb.reverse().toString());<br>        }<br>    }<br>}</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;小易准备去魔法王国采购魔法神器,购买魔法神器需要使用魔法币,但是小易现在一枚魔法币都没有,但是小易有两台魔法机器可以通过投入
    
    </summary>
    
      <category term="笔试题" scheme="http://www.myzwl.win/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="校招笔试" scheme="http://www.myzwl.win/source/tags/%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我的大学书单</title>
    <link href="http://www.myzwl.win/2017/09/05/my_books/"/>
    <id>http://www.myzwl.win/2017/09/05/my_books/</id>
    <published>2017-09-05T09:48:51.000Z</published>
    <updated>2017-09-13T05:39:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="读书的看法"><a href="#读书的看法" class="headerlink" title="读书的看法"></a>读书的看法</h4><p>真正喜欢上编程是在16年初两次大学兼职之后，一次是去某工厂做了几天的生产流水线，另一次是在快递分拣员（太坑了，几百人抢十个位置）。这两次兼职让我认识到了自身的不足，也认识到了如果自己不努力没有什么优势，也只能干着苦力廉价的劳动。<br>也很感谢网上那些开源的免费的优秀视频，像严蔚敏、马士兵、韩顺平等，还有其他许许多多，只要有耐心，会发现网上还是有许多开源的视频能帮助自己。<br>当你回过头来发现，读书能让自己学到许多，也是提升技术能力的一个重要手段。虽然看一些技术博客和视频能有帮助，但是发现自己的技术提高并没有实质性进步，原因就是缺乏系统性的阐述。<br>而学习最好的途径就是看书。<br>下面是我对读书的看法</p>
<blockquote>
<p>1 一本优秀的书籍是作者经过反复推敲、思考和总结的结果，它能系统的阐述技术并且拥有较高的质量，同时它能是我们对技术能有更全面的了解<br>2其次，书上也会在相应重要位置有相应的代码，所以可以边学习边实践<br>3.当我们在实际中遇到问题或者看到技术博客有相应的知识，会在书中有个更全面的认识<br>4.大师经典的书籍总是会把复杂的问题具体化和简单化，读他们的书就像在倾听他们勾勒的故事，就像倾听一个良师益友的经验之谈</p>
</blockquote>
<p><java编程思想第四版><br><img src="/images/imgs4/20.jpg" alt="Alt text"></java编程思想第四版></p>
<blockquote>
<p>作者： Bruce Eckel<br>标签： java基础<br>本书是一本非常经典的java基础书籍，本书主要介绍从java基础语法到最高级特性（深入的面向对象概念、多线程、自动项目构建、单元测试和调试等），同时在介绍的过程中，穿插着各种设计模式，总之，这本书是对于理解java基础非常有帮助和值得反反复复研读</p>
</blockquote>
<p>&lt;设计模式-java中的应用&gt;<br><img src="/images/imgs4/24.jpg" alt="Alt text"></p>
<blockquote>
<p>作者： 结城浩<br>标记： 设计模式<br>本书是书单中为数不多完整看完和实践的书，作者以浅显易懂的语言逐一说明了GoF的23个Design Pattern，让初次学习面向对象的读者也能立即掌握。作者以理论结合实际的思想从初学者角度阐述如何编写可复用、可扩展性的程序而且作者幽默的语言功底不得不让人佩服，总之，本书非常适合入门，而且还能收获许多</p>
</blockquote>
<p>&lt;大话数据结构&gt;<br><img src="/images/imgs4/21.jpg" alt="Alt text"></p>
<blockquote>
<p>作者：程杰<br>标记： 数据结构<br>本书是书单中为数不多完整看完和实践的书，作者以一个计算机教师教学为场景，讲解数据结构和相关算法的知识，通篇以一种趣味方式来叙述，大量引用了各种各样的生活知识来类比，并充分运用图形语言来体现抽象内容，对数据结构所涉及到的一些经典算法做到逐行分析、多算法比较。这里不得不佩服，作者将初学者引入从计算机角度去思考问题，看完之后的收获颇多，也对许多计算机底层有了进一步的认识。总之，这本书非常适合入门</p>
</blockquote>
<p><java与模式><br><img src="/images/imgs4/23.jpg" alt="Alt text"></java与模式></p>
<blockquote>
<p>作者：阎宏<br>标签： 设计模式<br>本书是我在对设计模式有了一定理解之后在看的。不得不说作者将设计模式介绍到了极致，全书详详细细的介绍了设计原则和设计模式，并就许多案例从设计角度多方位去思考并设计。总之，这是一本非常详细的关于设计模式的经典书籍</p>
</blockquote>
<p><spring实战><br><img src="/images/imgs4/27.jpg" alt="Alt text"></spring实战></p>
<blockquote>
<p>作者： Craig Walls<br>标签： spring<br>本书是一本讲解spring应用的经典书籍，目前也只看了前四章IOC和AOP，作者以勇者的故事贯穿这几章，看完之后对spring的这两个重要特性有了一个全新的认识。同时，概述非常适合作为学习指南参考书。总之，学习spring，读这本书非常有益</p>
</blockquote>
<p>&lt;剑指offer&gt;<br><img src="/images/imgs4/22.jpg" alt="Alt text"></p>
<blockquote>
<p>作者：何海涛<br>标签： 面试笔试<br>书中的65道面试题都很经典，刷完之后能对常见题型形成比较清晰的思路，而且对解决面试中的算法题有很好的帮助。也很惭愧，由于时间关系，只刷了一半的题。当然，如果认真对待每一个算法，你会发现对自己的编程有很大帮助，在你编码时，会有意识的从算法的角度去思考问题，同时考虑各种可能有隐患的情况。总之，对于算法思维的养成非常有帮助</p>
</blockquote>
<p>&lt;程序员的数学&gt;<br><img src="/images/imgs4/29.jpg" alt="Alt text"></p>
<blockquote>
<p>作者： 结城浩<br>标签： 数学与计算机<br>编程的基础是计算机科学，而计算机科学的基础是数学。本书保持作者一贯的作风，从初学者的角度去阐述问题。本书介绍了编程中常用的数学知识和一些经典的算法，慢慢的引导读者深入理解编程中的数学方法和思路，总之，结城浩先生的书总给人看完收获颇多</p>
</blockquote>
<p><java多线程设计模式><br><img src="/images/imgs4/25.jpg" alt="Alt text"></java多线程设计模式></p>
<blockquote>
<p>作者： 结城浩<br>标签： 多线程<br>本书从初学者角度介绍了java的多线程，同时包含了重要的12个线程设计模式和趣味的案例，同时，在看的过程中总是引导读者举一反三。也很惭愧，由于时间关系，只看了前几章。总之，这本书非常适合入门多线程。</p>
</blockquote>
<p>&lt;人月神话&gt;<br><img src="/images/imgs4/28.jpg" alt="Alt text"></p>
<blockquote>
<p>作者：布鲁克斯(Brooks, F. P.)<br>本书是一本在软件工程领域具有深远影响力和畅销不衰的经典著作。作者为人们管理复杂项目提供了具有洞察力的见解和各种管理经验。说来也惭愧，本书是在认真学习完&lt;软件工程&gt;这本书看的，由于时间的原因也只是浅尝了一下经典之作。但是这本书启发我们做工程类，一定要有软件工程的思想和全局观，而不能盲目的只重视编程这一阶段。而且按照软件工程的规范来，才能更好做出一个合格的项目。</p>
</blockquote>
<h4 id="毕业前努力浅尝的目标书单"><a href="#毕业前努力浅尝的目标书单" class="headerlink" title="毕业前努力浅尝的目标书单"></a>毕业前努力浅尝的目标书单</h4><p>&lt;深入理解java虚拟机&gt;<br><img src="/images/imgs4/30.jpg" alt="Alt text"></p>
<blockquote>
<p>作者：周志明<br>标签 ： jvm<br>作为一个优秀的java程序员，此书是必读之作，不动java底层运行机制，就不会洞悉如何优化。惭愧，还没读过，不做过多评论。</p>
</blockquote>
<p><algorithms 4th="" edition=""><br><img src="/images/imgs4/31.jpg" alt="Alt text"></algorithms></p>
<blockquote>
<p>作者：Robert Sedgewick/Kevin Wayne<br>标签： 算法<br>算法是程序的灵魂。而本书是作为算法领域经典的参考书，所以是一本必读之物。惭愧，还没读过，不做过多评论。</p>
</blockquote>
<p><effective java=""><br><img src="/images/imgs4/32.jpg" alt="Alt text"></effective></p>
<blockquote>
<p>作者： Joshua Bloch<br>标签： java基础<br>本书对编程中需要注意的点做了很好的总结，如果不想被自己的烂代码坑的话，此书是必读之物。惨愧，还没读过，不做过多评论。</p>
</blockquote>
<p>&lt;分布式Java应用 :基础与实践&gt;<br><img src="/images/imgs4/33.jpg" alt="Alt text"></p>
<blockquote>
<p>作者： 林昊<br>标签： 分布式<br>本书是分布式系统开发的入门之作，作者是淘宝网架构师，主要是以理论联系实践为主。惨愧，还没读过，不做过多评论。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;读书的看法&quot;&gt;&lt;a href=&quot;#读书的看法&quot; class=&quot;headerlink&quot; title=&quot;读书的看法&quot;&gt;&lt;/a&gt;读书的看法&lt;/h4&gt;&lt;p&gt;真正喜欢上编程是在16年初两次大学兼职之后，一次是去某工厂做了几天的生产流水线，另一次是在快递分拣员（太坑了，几百人
    
    </summary>
    
      <category term="个人感想" scheme="http://www.myzwl.win/categories/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="学习历程" scheme="http://www.myzwl.win/source/tags/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题八之javaweb基础</title>
    <link href="http://www.myzwl.win/2017/09/04/face_8/"/>
    <id>http://www.myzwl.win/2017/09/04/face_8/</id>
    <published>2017-09-04T09:48:51.000Z</published>
    <updated>2017-09-12T14:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出于时间紧张和需要找实习的压力，所以这段时间开始疯狂通过面试题来检验自己的大学的学习效果。以下面试题主要来自贴吧、论坛，有的没有答案需要自己总结，有的已给出答案。下面是我整理搜集的面试题（虽然，很不甘心以这种方式来获取面试资格，但是没办法，毕竟机会都没，何来发展），有些经过自己的语言转换，有些是参考原文给出，有些自己做实验进行验证，总之通过学习记录。来给自己一个动力</p>
<h4 id="使用spring框架的好处是什么"><a href="#使用spring框架的好处是什么" class="headerlink" title="使用spring框架的好处是什么"></a>使用spring框架的好处是什么</h4><p>轻量级、控制反转、面向切面编程（AOP）、容器（包含并管理应用中对象的生命周期和配置）、mvc框架、事务管理、异常处理</p>
<h4 id="applicationContext通常的实现是什么"><a href="#applicationContext通常的实现是什么" class="headerlink" title="applicationContext通常的实现是什么"></a>applicationContext通常的实现是什么</h4><p>FileSystemXmlApplicationContext（从一个xml文件中加载beans的定义）<br>classPathXmlApplicationContext：（也是从一个xml文件中加载beans文件，但是在classpath里找bean配置）<br>WebXmlApplicationContext：定义一个web应用的所有bean</p>
<h4 id="什么是spring的依赖注入？有哪些方法进行依赖注入？"><a href="#什么是spring的依赖注入？有哪些方法进行依赖注入？" class="headerlink" title="什么是spring的依赖注入？有哪些方法进行依赖注入？"></a>什么是spring的依赖注入？有哪些方法进行依赖注入？</h4><p>你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件和服务，之后一个容器负责把他们组装起来<br>构造器依赖注入、setter方法注入</p>
<h4 id="解释spring支持的几种bean的作用域"><a href="#解释spring支持的几种bean的作用域" class="headerlink" title="解释spring支持的几种bean的作用域"></a>解释spring支持的几种bean的作用域</h4><blockquote>
<p>singleton：bean在每个spring ioc容器中只有一个实例<br>prototype： 一个bean的定义可以有多个实例<br>request： 每次http请求都会创建一个bean，改作用域仅在web的spring applicationContext情形下有效<br>session、global-session</p>
</blockquote>
<h4 id="解释spring框架中bean的生命周期"><a href="#解释spring框架中bean的生命周期" class="headerlink" title="解释spring框架中bean的生命周期"></a>解释spring框架中bean的生命周期</h4><blockquote>
<p>1.spring容器从XML文件中读取bean的定义，并实例化bean<br>2.spring根据bean的定义填充所有的属性<br>3.如果bean实现了beanNameAware接口，spring传递bean的ID到setBeanName方法<br>4.如果Bean实现了BeanFactoryAware接口，spring传递beanfactory给setBeanFactory<br>5.如果有任何与bean相关联的beanpostprocessors，spring会在postprocesserBeforeInitalzation（）方法内部调用他们<br>6.如果bean实现了intialzingBean了，调用它的afterPropertySet方法，如果bean声明初始化方法，调用此初始化方法<br>7.如果bean实现了disposableBean，它将调用destroy（）方法</p>
</blockquote>
<h4 id="spring中如何注入一个java集合"><a href="#spring中如何注入一个java集合" class="headerlink" title="spring中如何注入一个java集合"></a>spring中如何注入一个java集合</h4><p><list>、<set>,<map>,<props></props></map></set></list></p>
<h4 id="有哪些不同方式的自动装配"><a href="#有哪些不同方式的自动装配" class="headerlink" title="有哪些不同方式的自动装配"></a>有哪些不同方式的自动装配</h4><p>有五种自动装配的方式</p>
<blockquote>
<p>no:默认方式，通过显示设置ref属性来进行装配<br>byName：通过参数名自动装配<br>byType：通过参数类型自动装配<br>constructor ： 类似于bytype，但是要提供构造器参数<br>autodetect：首次尝试construc，其次是bytype</p>
</blockquote>
<h4 id="hibernate中sessionFactory是线程安全吗？session是线程安全的吗"><a href="#hibernate中sessionFactory是线程安全吗？session是线程安全的吗" class="headerlink" title="hibernate中sessionFactory是线程安全吗？session是线程安全的吗"></a>hibernate中sessionFactory是线程安全吗？session是线程安全的吗</h4><p>sessionfactory对应一个数据存储的概念，它是线程安全的，可以被多个线程并发访问。一般在启动的时候通过单例模式进行封装便于访问<br>session是一个轻量级的非线程安全的对象，线程间不能共享session，session默认会延迟获取数据库连接</p>
<h4 id="mybatis中的动态SQL是什么意思"><a href="#mybatis中的动态SQL是什么意思" class="headerlink" title="mybatis中的动态SQL是什么意思"></a>mybatis中的动态SQL是什么意思</h4><p>动态sql主要包括if、choose、when、otherwise、trim、where、set、foreach</p>
<h4 id="简单说一下mybatis的一级缓存和二级缓存"><a href="#简单说一下mybatis的一级缓存和二级缓存" class="headerlink" title="简单说一下mybatis的一级缓存和二级缓存"></a>简单说一下mybatis的一级缓存和二级缓存</h4><p>mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从从缓存取出返回结果集。mybatis内部缓存使用一个hashmap，key为hashcode+sqlid+sql语句。value从查询出来映射生成java对象<br>mybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中存取数据，二级缓存是可以跨sqlsession的</p>
<h4 id="什么是泛型是如何工作？什么是类型擦除？如何工作？"><a href="#什么是泛型是如何工作？什么是类型擦除？如何工作？" class="headerlink" title="什么是泛型是如何工作？什么是类型擦除？如何工作？"></a>什么是泛型是如何工作？什么是类型擦除？如何工作？</h4><blockquote>
<p>1类型检查：在生成字节码之前提供类型检查<br>2.类型擦除：所有的类型参数都用他们的限定类型替换，包括类、变量和方法<br>3：如果调用类型擦除和多态性发生冲突时，则在调用该方法时插入强制类型转换<br>类型擦除：<br>所有类型参数都用他们的限定类型替换：比如T,Object</p>
</blockquote>
<p>如何工作</p>
<blockquote>
<p>泛型通过类型擦除来实现的，编译器在编译时期擦除了所有类型相关的信息，所有在运行时不存在任何类型相关的信息</p>
</blockquote>
<h4 id="Ajax的实现流程是主怎样的"><a href="#Ajax的实现流程是主怎样的" class="headerlink" title="Ajax的实现流程是主怎样的"></a>Ajax的实现流程是主怎样的</h4><blockquote>
<p>1创建XMLHttpRequest对象，也就是创建一个异步调用对象<br>2.创建一个新的HTTp请求，并指定该HTTP请求的方法，url及验证信息<br>3设置http请求状态变化的函数<br>4.发送HTTp请求<br>5获取异步调用返回的数据<br>6.使用javascript和DOM实现局部刷新</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;出于时间紧张和需要找实习的压力，所以这段时间开始疯狂通过面试题来检验自己的大学的学习效果。以下面试题主要来自贴吧、论坛，有的没有答案需要自己
    
    </summary>
    
      <category term="面试题" scheme="http://www.myzwl.win/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="学习效果检验" scheme="http://www.myzwl.win/source/tags/%E5%AD%A6%E4%B9%A0%E6%95%88%E6%9E%9C%E6%A3%80%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题七之javaweb基础</title>
    <link href="http://www.myzwl.win/2017/09/04/face_7/"/>
    <id>http://www.myzwl.win/2017/09/04/face_7/</id>
    <published>2017-09-04T08:48:51.000Z</published>
    <updated>2017-09-12T07:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出于时间紧张和需要找实习的压力，所以这段时间开始疯狂通过面试题来检验自己的大学的学习效果。以下面试题主要来自贴吧、论坛，有的没有答案需要自己总结，有的已给出答案。下面是我整理搜集的面试题（虽然，很不甘心以这种方式来获取面试资格，但是没办法，毕竟机会都没，何来发展），有些经过自己的语言转换，有些是参考原文给出，有些自己做实验进行验证，总之通过学习记录。来给自己一个动力</p>
<h4 id="说一说servlet的生命周期"><a href="#说一说servlet的生命周期" class="headerlink" title="说一说servlet的生命周期"></a>说一说servlet的生命周期</h4><p>包括加载和实例化、初始化、处理请求及服务结束，有javax.servlet.Servlet接口的相关方法实现<br>web容器加载servlet，生命周期开始。通过调用servlet的init（）方法进入初始化，通过service（）方法实现，根据不同的请求调用do<em>*</em>（）方法，服务结束，web容器调用servlet的destroy（）方法</p>
<h4 id="servlet-API中forward（）与redirect（）区别？"><a href="#servlet-API中forward（）与redirect（）区别？" class="headerlink" title="servlet API中forward（）与redirect（）区别？"></a>servlet API中forward（）与redirect（）区别？</h4><blockquote>
<p>从地址栏显示来说：<br>forward是服务器请求的地址资源，通过内部转发方式最后只返回一次内容，而redirect是重新转发，也就是需要经过两次请求与响应<br>从数据共享来说<br>forward可以共享request里的数据，而redirect不行，forward是服务器内部的一种操作，而redirect是服务器通知客户端，然后客户端重新发起请求<br>从运用地方<br>forward一般用于用户登录的时候，根据角色转发到相应的模块<br>redirect一般用于用户注销登录时返回主页和跳转到其它的网站<br>从效率上<br>forward高，redirect低</p>
</blockquote>
<h4 id="request-getAttribute-和request-getParameter-有什么区别"><a href="#request-getAttribute-和request-getParameter-有什么区别" class="headerlink" title="request.getAttribute()和request.getParameter()有什么区别"></a>request.getAttribute()和request.getParameter()有什么区别</h4><blockquote>
<p>后者取得通过容器的实现来取得通过类似post，get等方式传入的数据<br>前者返回对象，后者返回字符串</p>
</blockquote>
<h4 id="jsp有哪些内置对象？作用分别是什么"><a href="#jsp有哪些内置对象？作用分别是什么" class="headerlink" title="jsp有哪些内置对象？作用分别是什么"></a>jsp有哪些内置对象？作用分别是什么</h4><p>总共有九大内置对象</p>
<blockquote>
<p>request、reponse、pageContext、session、application、out、config、page、exception</p>
</blockquote>
<h4 id="Http中，get和post方法区别"><a href="#Http中，get和post方法区别" class="headerlink" title="Http中，get和post方法区别"></a>Http中，get和post方法区别</h4><blockquote>
<p>1.get请求的数据会被浏览器缓存起来，并以明文方式出现在url中，不太安全而post则更安全<br>2get传输数据有大小限制get请求的参数会跟在url后进行传递</p>
</blockquote>
<h4 id="jdbc访问数据库的基本步骤是什么？"><a href="#jdbc访问数据库的基本步骤是什么？" class="headerlink" title="jdbc访问数据库的基本步骤是什么？"></a>jdbc访问数据库的基本步骤是什么？</h4><blockquote>
<p>1.加载驱动<br>2.通过driverManager对象获取连接对象Connection<br>3.通过连接对象获取会话<br>4.通过会话进行数据的增删改查，封装对象<br>5。关闭数据库</p>
</blockquote>
<h4 id="什么是幻读"><a href="#什么是幻读" class="headerlink" title="什么是幻读"></a>什么是幻读</h4><p>幻读是指一个事务多次执行一条查询语句返回的确是不同的值。假设一个事务正根据某个条件进行数据库查询，然后另一个事务插入了一行满足这个查询条件的数据，之后这个事务再次执行了这条查询，返回的结果集中包含在刚插入的那条数据</p>
<h4 id="谈谈你对struts的理解"><a href="#谈谈你对struts的理解" class="headerlink" title="谈谈你对struts的理解"></a>谈谈你对struts的理解</h4><blockquote>
<p>1.structs本质就是一个servlet，而这个servlet就是ActionServlet或是其子类，即将所有请求都交给servlet去处理，而该servlet参考配置文件将请求分发给不同action处理<br>2.在把请求交给action之前，会将参数封装成一个frombean对象，而该对象只有通过validate方法，才能将对象传递给execute方法，否则将返回一个错误页面，并且这个页面由input属性指定<br>3.action执行完之后要返回显示的结果视图，这个结果一个actionForward来表示，而其是通过在struts配置文件中配置获得返回页面</p>
</blockquote>
<h4 id="谈谈你对hibernate的理解"><a href="#谈谈你对hibernate的理解" class="headerlink" title="谈谈你对hibernate的理解"></a>谈谈你对hibernate的理解</h4><blockquote>
<p>1.使用hibernate的基本流程：配置Configuration对象、产生sessionfactory、创建session对象、启动事务，完成CRUD操作，提交事务，关闭session<br>2.使用hibernate时，先要配置hibernate.cfg.xml文件，其中配置数据库连接信息和方言，还要为每个实体配置相应的hbm.xml文件<br>3.在应用hibernate时，重点要了解session的缓存原理，级联，延迟加载和hql语句</p>
</blockquote>
<h4 id="谈谈你对spring的理解"><a href="#谈谈你对spring的理解" class="headerlink" title="谈谈你对spring的理解"></a>谈谈你对spring的理解</h4><blockquote>
<p>1.spring是实现了工厂模式的工厂类，这个类为beanFactory，通常为其子类applicationContext，spring相当于一个大的工厂类，在其配置文件中通过<bean>元素配置用于创建实例对象名和实例对象的属性<br>2.spring提供了对IOC的良好支持，利用IOC可以很好的实现模块间的解耦<br>3.spring提供了对AOP技术的良好封装，即把系统中很多不相干的类的方法，在这些众多的方法中加入某种系统功能的代码，例如，加入日志，权限判断，异常处理等等，称为AOP<br>4实现AOP采用代理类，在jdk中采用proxy类产生动态代理的方式为某个接口生成实现类，</bean></p>
</blockquote>
<h4 id="谈谈struts的优缺点"><a href="#谈谈struts的优缺点" class="headerlink" title="谈谈struts的优缺点"></a>谈谈struts的优缺点</h4><p>优点：</p>
<blockquote>
<p>1.实现mvc模式，结构清晰，使开发者只关注业务逻辑的实现<br>2有丰富的tag可以使用，大大提高开发效率<br>3.页面导航使系统的脉络更加清晰<br>4.提供Exception处理机制</p>
</blockquote>
<p>缺点：</p>
<blockquote>
<p>1.structs的action是一种thread-safe方式，它仅仅允许一个实例处理所有的请求。容易引起线程安全问题<br>2 测试不方便。struts的每个action都同web层耦合在一起，这样它的测试依赖于web容器，单元测试很难实现<br>3.对servlet的依赖性过强，struts处理action时必须依赖servletRequest和servletRespouse，所以它摆脱不了servlet容器</p>
</blockquote>
<h4 id="mybatis和hibernate有什么不同"><a href="#mybatis和hibernate有什么不同" class="headerlink" title="mybatis和hibernate有什么不同"></a>mybatis和hibernate有什么不同</h4><p>相同点：</p>
<blockquote>
<p>都屏蔽了jdbc api底层访问细节，编程流程固定，还将sql语句与java代码混杂在一起</p>
</blockquote>
<p>不同点</p>
<blockquote>
<p>半自动，将sql语句与代码进行分离，提供了将结果集自动封装成为实体对象和对象集合的功能<br>全自动，hibernate，提供hql语句</p>
</blockquote>
<h4 id="介绍一下hibernate的二级缓存"><a href="#介绍一下hibernate的二级缓存" class="headerlink" title="介绍一下hibernate的二级缓存"></a>介绍一下hibernate的二级缓存</h4><p>回答思路：1.首先说清楚什么是缓存<br>2.再说有了hibernate的session就是一级缓存，即有了一级缓存，为什么还要有二级缓存<br>3.最后说如何配置hibernate的二级缓存</p>
<blockquote>
<p>1.缓存就是把以前从数据库中查询出来和使用过的对象保存在内存中，这个数据结构通常类似于hashmap，当以后要使用某个对象时，先查询缓存中是否有这个对象，如果有则使用缓存中的对象，如果没有则去查询数据库，并将查询出来的对象保存在缓存中，以便下次使用<br>2.hibernate的session就是一级缓存，当想要使用session从数据库中查询出的一个对象时，session也是先从自己内部查看是否存在这个对象，存在则直接返回，不存在则查询数据库<br>由于session代表依次会话，一个session与一个数据库连接的相关性，通常仅用一个事务，用完就关闭，由于一级缓存是线程不安全的，要被多个线程共享，而二级缓存是全局缓存，可以被多个线程和事务共享<br>3二级缓存是独立于hibernate的软件部件，如ehcache</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;出于时间紧张和需要找实习的压力，所以这段时间开始疯狂通过面试题来检验自己的大学的学习效果。以下面试题主要来自贴吧、论坛，有的没有答案需要自己
    
    </summary>
    
      <category term="面试题" scheme="http://www.myzwl.win/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="学习效果检验" scheme="http://www.myzwl.win/source/tags/%E5%AD%A6%E4%B9%A0%E6%95%88%E6%9E%9C%E6%A3%80%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题六之java基础</title>
    <link href="http://www.myzwl.win/2017/09/03/face_6/"/>
    <id>http://www.myzwl.win/2017/09/03/face_6/</id>
    <published>2017-09-03T08:48:51.000Z</published>
    <updated>2017-09-07T13:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出于时间紧张和需要找实习的压力，所以这段时间开始疯狂通过面试题来检验自己的大学的学习效果。以下面试题主要来自贴吧、论坛，有的没有答案需要自己总结，有的已给出答案。下面是我整理搜集的面试题（虽然，很不甘心以这种方式来获取面试资格，但是没办法，毕竟机会都没，何来发展），有些经过自己的语言转换，有些是参考原文给出，有些自己做实验进行验证，总之通过学习记录。来给自己一个动力</p>
<h4 id="说出math的取整函数及其意义"><a href="#说出math的取整函数及其意义" class="headerlink" title="说出math的取整函数及其意义"></a>说出math的取整函数及其意义</h4><p>提供了三种，分别为ceil（向上取整），如math.ceil（11.3）为12；<br>floor（向下取整），如math.floor（11.3），结果为11<br>round（四舍五入），如math.round（11.5）为12</p>
<h4 id="Overload与Override的区别？Overload的方法是否可以改变返回值的类型？"><a href="#Overload与Override的区别？Overload的方法是否可以改变返回值的类型？" class="headerlink" title="Overload与Override的区别？Overload的方法是否可以改变返回值的类型？"></a>Overload与Override的区别？Overload的方法是否可以改变返回值的类型？</h4><p>Overload是重载，Overrride是覆盖，也就是重写</p>
<blockquote>
<p>重载表示方法名相同，但是参数个数或类型不同）<br>重写表示子类中的方法可以与父亲中某个方法的名称和参数完全相同，通过子类创建实例调用父类这个方法，也就是相当于覆盖了父类的这个方法，但是当父类是private时相当于子类增加了一个全新的方法，就不存在覆盖了。并且子类应该比父类抛出更少的异常或者拥有更大的权限<br>如果参数名不同会改变返回类型，但是如果都一样肯定不会改变返回类型</p>
</blockquote>
<h4 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h4><p>接口是否可继承接口？抽象类是否可实现接口？抽象类是否可继承具体类？抽象类是否可以有静态的main方法？</p>
<blockquote>
<p>接口可以继承接口，抽象类可以实现接口，抽象类可以继承具体类，抽象类可以有静态的main方法<br>抽象类和普通类唯一的区别就是不能创建实例对象和允许有abstract方法</p>
</blockquote>
<h4 id="java中实现多态的机制是什么？"><a href="#java中实现多态的机制是什么？" class="headerlink" title="java中实现多态的机制是什么？"></a>java中实现多态的机制是什么？</h4><p>靠的是父类或接口定义的引用变量可以指向子类或者具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量类型中定义的方法</p>
<h4 id="abstractclass和interface语法上有什么区别"><a href="#abstractclass和interface语法上有什么区别" class="headerlink" title="abstractclass和interface语法上有什么区别"></a>abstractclass和interface语法上有什么区别</h4><blockquote>
<p>1.抽象类可以有构造方法，接口不能有构造方法<br>2.抽象类中可以有普通成员方法，接口中没有普通成员变量<br>3.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的方法。<br>4.抽象类中的抽象方法访问类型可以是public、protected，但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型<br>5.抽象类中可以包含静态方法，接口中不能包含静态方法<br>6.抽象类和接口类中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以是任意，但是接口中定义的变量只能是public static final类型<br>7一个类可以实现多个接口，但只能继承一个抽象类</p>
</blockquote>
<h4 id="abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized？"><a href="#abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized？" class="headerlink" title="abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized？"></a>abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized？</h4><blockquote>
<p>abstract的method不可以是static的，因为抽象的方法是要被子类实现的，而static与子类扯不上关系<br>native方法表示该方法要用另外一种依赖平台的编程语言实现的，不存在被子类实现的问题，所以，它也不能为抽象的，<br>synchronized应该是作用在一个具体的方法上才有意义，而且，方法上的synchronized同步所使用的同步锁对象是this，而抽象方法无法确定this是什么</p>
</blockquote>
<h4 id="下面这条语句一共创建了多少个对象？"><a href="#下面这条语句一共创建了多少个对象？" class="headerlink" title="下面这条语句一共创建了多少个对象？"></a>下面这条语句一共创建了多少个对象？</h4><p>String s=”a”+”b”+”c”+”d”;<br>对于如下代码</p>
<blockquote>
<p>String s1=”a”;<br>String s2=s1+”b”;<br>String s3=”a”+”b”;<br>System.out.println(s2=”ab”);<br>System.out.println(s3=”ab”);<br>第一句打印为false，第二句为true，说明编译器对字符串常量直接进行了优化，所以产生了一个对象</p>
</blockquote>
<h4 id="java中堆和栈有什么区别？"><a href="#java中堆和栈有什么区别？" class="headerlink" title="java中堆和栈有什么区别？"></a>java中堆和栈有什么区别？</h4><p>jvm中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个jvm的所有线程共享</p>
<h4 id="什么是java序列化，如何实现java序列化？或者解释serializable接口的作用？"><a href="#什么是java序列化，如何实现java序列化？或者解释serializable接口的作用？" class="headerlink" title="什么是java序列化，如何实现java序列化？或者解释serializable接口的作用？"></a>什么是java序列化，如何实现java序列化？或者解释serializable接口的作用？</h4><p>将一个对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如将一个java对象存储到硬盘或者送给网络上的其他计算机，可以用代码把一个java对象变成某个格式的字节流在传输<br>如果要让java自动帮我们做，就需要实现serializable接口，编译的类才被writeObject方法操作，例如，在web中，如果对象被保存在了session中，tomcat在重启时要把session对象序列化到硬盘</p>
<h4 id="描述一下JVM加载class文件的原理机制？"><a href="#描述一下JVM加载class文件的原理机制？" class="headerlink" title="描述一下JVM加载class文件的原理机制？"></a>描述一下JVM加载class文件的原理机制？</h4><p>JVM中类的装载是由classLoader和它的子类来实现的，java classLoader是一个重要的运行时系统组件。他负责在运行时查找和装入文件的类</p>
<h4 id="heap和stack有什么区别？"><a href="#heap和stack有什么区别？" class="headerlink" title="heap和stack有什么区别？"></a>heap和stack有什么区别？</h4><p>java的内存分为两类，栈内存和堆内存</p>
<blockquote>
<p>栈内存是指程序进入一个方法时，会为这个方法单独分配一块私有存储空间，用于存储这个方法内部的局部变量，当这个方法结束时，分配给这个方法的栈会释放，这个栈的变量也将随之释放<br>堆是用于存放不在当前方法栈中的那些数据，例如使用new创建的对象放在堆里，所以，它不会随方法结束而消失，局部变量使用final修饰后，放在堆中</p>
</blockquote>
<h4 id="GC是是什么？为什么要有GC？"><a href="#GC是是什么？为什么要有GC？" class="headerlink" title="GC是是什么？为什么要有GC？"></a>GC是是什么？为什么要有GC？</h4><p>GC是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定性甚至崩溃，java提供GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，java语言没有提供释放已分配内存的显示操作方法</p>
<h4 id="垃圾回收的优点和原理，并考虑2种回收机制"><a href="#垃圾回收的优点和原理，并考虑2种回收机制" class="headerlink" title="垃圾回收的优点和原理，并考虑2种回收机制"></a>垃圾回收的优点和原理，并考虑2种回收机制</h4><p>垃圾回收可以有效的防止内存泄漏，有效的使用可以使用的内存。垃圾回收期是作为一个单独低级别的线程运行，不可预知的情况下对内存中已经死亡或者长时间没有使用的对象进行清除和回收，程序员不能实时调用垃圾回收器对某个对象或所有对象进行垃圾回收<br>回收机制有标记垃圾回收和增量垃圾回收</p>
<h4 id="垃圾回收器基本原理，可以马上回收内存及有什么办法主动通知JVM进行垃圾回收"><a href="#垃圾回收器基本原理，可以马上回收内存及有什么办法主动通知JVM进行垃圾回收" class="headerlink" title="垃圾回收器基本原理，可以马上回收内存及有什么办法主动通知JVM进行垃圾回收"></a>垃圾回收器基本原理，可以马上回收内存及有什么办法主动通知JVM进行垃圾回收</h4><blockquote>
<p>对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小、及使用情况。通常，GC采用有向图的方式记录和管理堆里中的所有对象，通过这种方式确定哪些对象是可达的，哪些对象是不可达的。当GC确定一些对象不可达的，GC有责任回收这些内存空间<br>程序员可以手动执行System.gc（），通知gc运行，但是java语言规范并不保证GC一定会执行</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;出于时间紧张和需要找实习的压力，所以这段时间开始疯狂通过面试题来检验自己的大学的学习效果。以下面试题主要来自贴吧、论坛，有的没有答案需要自己
    
    </summary>
    
      <category term="面试题" scheme="http://www.myzwl.win/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="学习效果检验" scheme="http://www.myzwl.win/source/tags/%E5%AD%A6%E4%B9%A0%E6%95%88%E6%9E%9C%E6%A3%80%E9%AA%8C/"/>
    
  </entry>
  
</feed>
